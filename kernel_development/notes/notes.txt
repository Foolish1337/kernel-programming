- User processes: These are the normal processes base on the image files, executing on the system ( such as Notepad.exe, cmd.exe, explorer.exe)
- Subsystel DLLs: subsystem dynamic link libraries (DLLs) that implement the API of a subsystem. A subsystem is a verrtain view of capabilities exposed by the kernel. windows 8.1 (and higher) there is only one subsytem (the windows subsystem): commanly known subsystem DLLs (kernel32.dll, user32.dll, gdi32.dll, advapi32.dll, combase.dll)
- NTDLL: This is the system wide DLL which implements the native Windows API. This is the lower layer of code which is still part of the user mode. It what makes the transition into kernel mode for system call invocation. NTDLL implements (heap manager, image loader and some parts of the user mode thread pool)
- Service Processes: These are normal windows processes that communicate with the service control manager (SCM), they allow some control over thei lifetime. The SCM can start, stop, pause, resume and send other messages to services. Services normally run under - local system, network service or local service.
- Executive: This is the upper layer of NtOskrnl.exe (kernel). It hosts most of the code that is in kernel mode. It includes the varion "managers": Object manager, Memory manager, I/O (input/output) Manager, Plug & Play managfer, Power manager, Configuration manager, etc... It's larger thhan the lower kernel layer.
- Kernel: This layer implements the most fundamental and time sensitive parts of kernel mode OS code. This includes thread scheduling, interrupt and exception dispatching and implementation of various kernel primitives such as mutex and semaphore. Some of the krnel code is written in CPU-sepecific machine language for efficiency and for getting direct access to CPU-specific details.
- Device Drivers: These are lodable kernel modules. Their code executes in kernel mode and so has the full power of the kernel.
- Win32k.sys: The "kernel mode component of the Windows subsytem". This is basically a kernel module (driver) that handles the UI (user interface) part of windows and the classic GDI (Grapics Device Interface) APIs. All windowing operations like: CreateWindowEx, GetMessage, PostMessage, etc, are handled by this component. The other part of the system has little to no knowledge of UI
- Hadware Abstraction Layer (HAL): The HAL is an abstraction layer over the hardware closest to the CPU. It allows device drivers to use APIs that do not require details and specific knowledge of things like Interrupt Controller or DMA controller. Natrually, this layer is mostly usefule for device driver written to handle Hardware devices.

// Not going write whole book (bruh) going to sum it up in few words now......
- System processes: processes typicall "just there", not normall communicated with directly, terminating them can be fatal (can cause crash), example of procs (Smss.exe, Lsass.exe, Winlogon.exe, Services.exe)
- Subsystem Process:  